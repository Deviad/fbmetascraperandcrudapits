{"version":3,"sources":["app.ts","connection.ts","scraper.ts"],"names":[],"mappings":";;;;;;AAAA,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AACjC,IAAI,UAAU,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAEzC,IAAI,GAAG,GAAG,OAAO,EAAE,CAAC;AAGpB,GAAG,CAAC,GAAG,CAAC,gBAAgB,EAAE,UAAU,GAAQ,EAAE,GAAQ;IAElD,CAAC;QACG,MAAM,CAAC,IAAI,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACpC,CAAC,CAAC,EAAE,CAAA;AAER,CAAC,CAAC,CAAC;AAGH,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE;IACb,OAAO,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAC;AACvD,CAAC,CAAC,CAAC;AAGH,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC;;;;;;;ACpBrB;;GAEG;AACH,yBAA2B;AAE3B,qCAAkC;AAGlC;IAAA;IAwCA,CAAC;IApCG,8BAAS,GAAT,UAAU,GAAO,EAAE,GAAO;QACtB,IAAI,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAE3B,IAAI,WAAW,GAAG,iBAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAEtC,IAAI,MAAM,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAE7C,IAAI,SAAS,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;QAEjC,+DAA+D;QAE/D,kDAAkD;QAElD,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;QAE9C,sFAAsF;QACtF,yFAAyF;QAEzF,wCAAwC;QAExC,MAAM,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;QAE3B,+EAA+E;QAC/E,6BAA6B;QAE7B,gCAAgC;IAEpC,CAAC;IACD,mCAAc,GAAd,UAAe,GAAQ;QACvB,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,CACrB,UAAS,QAA0B,IAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAC3D,UAAU,GAAU,IAAI,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EACxD,cAAc,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAC5C,CAAC;IACN,CAAC;IAED,iBAAC;AAAD,CAxCA,AAwCC,IAAA;AAxCY,gCAAU;;;;;;;ACRvB,+CAAiD;AAEjD;IAEI;IAEA,CAAC;IACD,mCAAmC;IACnC,EAAE;IACF,EAAE;IACF,uBAAuB;IACvB,qDAAqD;IACrD,wEAAwE;IACxE,SAAS;IACT,kBAAkB;IAClB,IAAI;IAEM,cAAM,GAAb,UAAc,QAAY;QAEzB,IAAI,KAAK,GAAQ,IAAI,GAAG,EAAE,CAAC;QAE3B,KAAK,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,EAAE,UAAC,EAAM,EAAE,GAAO;YACrC,MAAM,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;QACrB,CAAC,CAAC,CAAA;IACH,CAAC;IACR,cAAC;AAAD,CAvBA,AAuBC,IAAA;AAvBY,0BAAO","file":"","sourcesContent":["var express = require('express');\nvar Connection = require('./connection');\n\nvar app = express();\n\n\napp.get('/api/richlinks', function (req: any, res: any) {\n\n    (function(){\n        return new Connection(req, res);\n    })()\n\n});\n\n\napp.listen(5100, function () {\n    console.log('Example app listening on port 5100!');\n});\n\n\nmodule.exports = app;","/**\n * Created by spotted on 26/02/17.\n */\nimport * as Rx from 'rxjs';\n\nimport {Scraper} from \"./scraper\";\n\n\nexport class Connection {\n\n\n\n    construct(req:any, res:any) {\n        let url = req.param('url');\n\n        let scrapedData = Scraper.scrape(url);\n\n        let source = Rx.Observable.from(scrapedData);\n\n        let published = source.publish();\n\n        //useful for polymorfic kind of stuff: add a 'SourceA' argument\n\n        // published.subscribe(createObserver('SourceA'));\n\n        published.subscribe(this.createObserver(res));\n\n        //disposable object that I can use later own, more for my own convenience, to remember\n        //that this is the connection. Otherwise I could just simply use published.unsubscribe();\n\n        // var connection = published.connect();\n\n        return published.connect();\n\n        //if you need polymorfism place a tag parameter that basically receives SourceA\n        // or whatever tag you decide\n\n        // function createObserver(tag){\n\n    }\n    createObserver(res: any){\n    return Rx.Observer.create(\n        function(response: Express.Response) {res.json(response); },\n        function (err: Error) { console.log('Error: %s', err); },\n        function () { console.log('Completed'); }\n    );\n}\n\n}","import * as ogs from 'open-graph-scraper/app.js';\n\nexport class Scraper {\n\n    constructor() {\n\n    }\n    // static scrape (input_url:any ) {\n    //\n    //\n    //     let myOgs = ogs(\n    //       { url: input_url }, // Settings object first\n    //       function(er: any, res : any) { return (er, res); }  // Callback\n    //     );\n    //   return myOgs;\n    // }\n\n       static scrape(this_url:any):any {\n\n        let pippo: any = new ogs();\n\n        pippo({ url: this_url }, (er:any, res:any)=>{\n            return (er, res);\n        })\n       }\n}"]}